/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as LoginRouteImport } from "./routes/login"
import { Route as ForumsRouteImport } from "./routes/forums"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as ForumsForumIdRouteImport } from "./routes/forums_/$forumId"
import { Route as ForumsForumIdNewRouteImport } from "./routes/forums_/$forumId_/new"
import { Route as ForumsForumIdPostIdRouteImport } from "./routes/forums_/$forumId_/$postId"

const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any)
const ForumsRoute = ForumsRouteImport.update({
  id: "/forums",
  path: "/forums",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const ForumsForumIdRoute = ForumsForumIdRouteImport.update({
  id: "/forums_/$forumId",
  path: "/forums/$forumId",
  getParentRoute: () => rootRouteImport,
} as any)
const ForumsForumIdNewRoute = ForumsForumIdNewRouteImport.update({
  id: "/forums_/$forumId_/new",
  path: "/forums/$forumId/new",
  getParentRoute: () => rootRouteImport,
} as any)
const ForumsForumIdPostIdRoute = ForumsForumIdPostIdRouteImport.update({
  id: "/forums_/$forumId_/$postId",
  path: "/forums/$forumId/$postId",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/forums": typeof ForumsRoute
  "/login": typeof LoginRoute
  "/forums/$forumId": typeof ForumsForumIdRoute
  "/forums/$forumId/$postId": typeof ForumsForumIdPostIdRoute
  "/forums/$forumId/new": typeof ForumsForumIdNewRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/forums": typeof ForumsRoute
  "/login": typeof LoginRoute
  "/forums/$forumId": typeof ForumsForumIdRoute
  "/forums/$forumId/$postId": typeof ForumsForumIdPostIdRoute
  "/forums/$forumId/new": typeof ForumsForumIdNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/forums": typeof ForumsRoute
  "/login": typeof LoginRoute
  "/forums_/$forumId": typeof ForumsForumIdRoute
  "/forums_/$forumId_/$postId": typeof ForumsForumIdPostIdRoute
  "/forums_/$forumId_/new": typeof ForumsForumIdNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/forums" | "/login" | "/forums/$forumId" | "/forums/$forumId/$postId" | "/forums/$forumId/new"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/forums" | "/login" | "/forums/$forumId" | "/forums/$forumId/$postId" | "/forums/$forumId/new"
  id: "__root__" | "/" | "/forums" | "/login" | "/forums_/$forumId" | "/forums_/$forumId_/$postId" | "/forums_/$forumId_/new"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForumsRoute: typeof ForumsRoute
  LoginRoute: typeof LoginRoute
  ForumsForumIdRoute: typeof ForumsForumIdRoute
  ForumsForumIdPostIdRoute: typeof ForumsForumIdPostIdRoute
  ForumsForumIdNewRoute: typeof ForumsForumIdNewRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/forums": {
      id: "/forums"
      path: "/forums"
      fullPath: "/forums"
      preLoaderRoute: typeof ForumsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/forums_/$forumId": {
      id: "/forums_/$forumId"
      path: "/forums/$forumId"
      fullPath: "/forums/$forumId"
      preLoaderRoute: typeof ForumsForumIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/forums_/$forumId_/new": {
      id: "/forums_/$forumId_/new"
      path: "/forums/$forumId/new"
      fullPath: "/forums/$forumId/new"
      preLoaderRoute: typeof ForumsForumIdNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/forums_/$forumId_/$postId": {
      id: "/forums_/$forumId_/$postId"
      path: "/forums/$forumId/$postId"
      fullPath: "/forums/$forumId/$postId"
      preLoaderRoute: typeof ForumsForumIdPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForumsRoute: ForumsRoute,
  LoginRoute: LoginRoute,
  ForumsForumIdRoute: ForumsForumIdRoute,
  ForumsForumIdPostIdRoute: ForumsForumIdPostIdRoute,
  ForumsForumIdNewRoute: ForumsForumIdNewRoute,
}
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()
